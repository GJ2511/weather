{"version":3,"sources":["serviceWorker.js","services/constant.js","services/weatherService.js","container/Weather/ducks.js","sagas/index.js","reducers/index.js","store/index.js","component/Loader/Loader.js","component/Radio/Radio.js","component/Arrow/Arrow.js","component/Card/Card.js","component/Chart/Chart.js","component/Error/Error.js","container/Weather/WeatherContainer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","WEATHER_URL","API_KEY","param","params","url","fetch","response","json","result","getWeather","weatherSaga","initialState","loading","weather","cards","error","GET_WEATHER_REQUESTED","GET_WEATHER_SUCCESS","GET_WEATHER_ERROR","RESET","dataFormatter","list","forEach","data","dt_txt","split","d","t","Celcius","main","temp","undefined","push","time","Farenhite","Object","keys","map","length","tempSum","reduce","total","obj","AvgFarenhite","AvgCelcius","getState","state","selectWeatherData","createSelector","selectCardsData","selectError","selectLoading","call","WeatherService","q","cnt","errors","put","type","payload","takeLatest","weatherReducer","action","rootSaga","all","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","store","createStore","run","configureStore","Loader","classes","className","classNames","role","defaultProps","Radio","value","unit","handleChange","checked","onChange","Arrow","direction","handleClick","children","onClick","Card","startIndex","endIndex","selectDate","unitPostFix","charAt","card","index","cardClasses","key","toFixed","ColumnChart","weatherData","dates","values","chartType","width","ErrorPage","WeatherContainer","onArrowClick","setState","onTemperatureChange","evt","target","onCardClick","dateToBeSet","getWeatherRequest","this","props","reset","Error","filter","Chart","Component","connect","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c7b4008d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","export const API_URL = 'https://api.openweathermap.org';\r\nexport const WEATHER_URL = `${API_URL}/data/2.5/forecast`;\r\nexport const API_KEY = 'ee84d7dc82a78d615bb769e17b0f594c';\r\n","import { WEATHER_URL, API_KEY } from './constant';\r\n\r\nclass WeatherService {\r\n    async getWeather(params = {}) {\r\n        let url = `${WEATHER_URL}?APPID=${API_KEY}&`;\r\n\r\n        for (const param in params) {\r\n            url += `${param}=${params[param]}&`;\r\n        }\r\n\r\n        const response = await fetch(url);\r\n        const result = await response.json();\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default new WeatherService();\r\n","import { takeLatest, call, put } from 'redux-saga/effects';\r\nimport { createSelector } from 'reselect';\r\n\r\nimport WeatherService from '../../services/weatherService';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    weather: {},\r\n    cards: [],\r\n    error: false,\r\n};\r\n\r\nconst PREFIX = 'WEATHER';\r\nconst GET_WEATHER_REQUESTED = `${PREFIX}//GET_WEATHER_REQUESTED`;\r\nconst GET_WEATHER_SUCCESS = `${PREFIX}//GET_WEATHER_SUCCESS`;\r\nconst GET_WEATHER_ERROR = `${PREFIX}//GET_WEATHER_ERROR`;\r\nconst RESET = `${PREFIX}//RESET`;\r\n\r\nexport const actionTypes = {\r\n    GET_WEATHER_REQUESTED,\r\n    GET_WEATHER_SUCCESS,\r\n    GET_WEATHER_ERROR,\r\n    RESET,\r\n};\r\n\r\nexport const dataFormatter = ({ list }) => {\r\n    let weather = {};\r\n\r\n    list.forEach((data) => {\r\n        const [d, t] = data.dt_txt.split(' ');\r\n        const Celcius = data.main.temp - 32;\r\n\r\n        if (weather[d] === undefined) {\r\n            weather[d] = [];\r\n        }\r\n\r\n        weather[d].push({ time: t, Celcius, Farenhite: data.main.temp });\r\n    });\r\n\r\n    const dates = Object.keys(weather);\r\n\r\n    const cards = dates.map((d) => {\r\n        const { length } = weather[d];\r\n        const tempSum = weather[d].reduce((total, obj) => {\r\n            return total + obj.Farenhite;\r\n        }, 0);\r\n\r\n        return { d, AvgFarenhite: tempSum / length, AvgCelcius: (tempSum - length * 32) / length };\r\n    });\r\n\r\n    return { weather, cards };\r\n};\r\n\r\nconst weatherReducer = (state = initialState, action = {}) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case GET_WEATHER_REQUESTED:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case GET_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: false,\r\n                ...dataFormatter(payload),\r\n            };\r\n        case GET_WEATHER_ERROR:\r\n            return {\r\n                ...state,\r\n                ...initialState,\r\n                error: true,\r\n            };\r\n        case RESET:\r\n            return {\r\n                ...initialState,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const getState = (state) => state && state.weather;\r\nexport const getWeatherRequest = () => ({ type: GET_WEATHER_REQUESTED });\r\nexport const reset = () => ({ type: RESET });\r\n\r\nexport const selectWeatherData = createSelector([getState], (state) => state.weather);\r\nexport const selectCardsData = createSelector([getState], (state) => state.cards);\r\nexport const selectError = createSelector([getState], (state) => state.error);\r\nexport const selectLoading = createSelector([getState], (state) => state.loading);\r\n\r\nexport const selectors = {\r\n    selectWeatherData,\r\n    selectCardsData,\r\n    selectError,\r\n    selectLoading,\r\n};\r\n\r\nexport function* getWeather() {\r\n    try {\r\n        const response = yield call([WeatherService, 'getWeather'], {\r\n            q: 'Munich,de',\r\n            cnt: 40,\r\n        });\r\n\r\n        if (response.errors) {\r\n            yield put({ type: GET_WEATHER_ERROR });\r\n        } else {\r\n            yield put({\r\n                type: GET_WEATHER_SUCCESS,\r\n                payload: response,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        yield put({\r\n            type: GET_WEATHER_ERROR,\r\n        });\r\n    }\r\n}\r\n\r\nexport function* weatherSaga() {\r\n    yield takeLatest(GET_WEATHER_REQUESTED, getWeather);\r\n}\r\n\r\nexport default weatherReducer;\r\n","import { all } from 'redux-saga/effects';\r\n\r\nimport { weatherSaga } from '../container/Weather/ducks';\r\n// single entry point to start all Sagas at once\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        weatherSaga(),\r\n    ]);\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport weatherReducer from '../container/Weather/ducks';\r\n\r\nconst rootReducer = () =>\r\n    combineReducers({\r\n        weather: weatherReducer,\r\n    });\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootSaga from '../sagas';\r\nimport rootReducer from '../reducers';\r\n\r\nconst devToolEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\nconst composeEnhancers = devToolEnhancer || compose;\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst enhancer = [applyMiddleware( sagaMiddleware)];\r\n\r\nexport const configureStore = (initialState = {}) => {\r\n    const store = createStore(rootReducer(), initialState, composeEnhancers(...enhancer));\r\n\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport { store };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nconst Loader = ({ classes }) => {\r\n    return (\r\n        <div\r\n            className={classNames('loader-container ', {\r\n                classes,\r\n            })}\r\n        >\r\n            <div className=\"d-flex  flex-column justify-content-center align-items-center vh-100\">\r\n                <div className=\"spinner-grow\" role=\"status\"></div>\r\n                <p className=\"font-weight-bold\">Loading ...</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nLoader.propTypes = {\r\n    classes: PropTypes.string,\r\n};\r\n\r\nLoader.defaultProps = {\r\n    classes: '',\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Radio = ({ value, unit, handleChange }) => {\r\n    return (\r\n        <>\r\n            <input\r\n                className=\"form-check-input hover-hand\"\r\n                type=\"radio\"\r\n                value={value}\r\n                checked={unit === value}\r\n                onChange={handleChange}\r\n            />\r\n            <label className=\"form-check-label\">{value}</label>\r\n        </>\r\n    );\r\n};\r\n\r\nRadio.propTypes = {\r\n    handleChange: PropTypes.func.isRequired,\r\n    unit: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Radio;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Arrow = ({ direction, handleClick, children }) => {\r\n    return (\r\n        <span className=\"arrow text-primary font-size-70 hover-hand\" onClick={() => handleClick(direction)}>\r\n            {children}\r\n        </span>\r\n    );\r\n};\r\n\r\nArrow.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    direction: PropTypes.oneOf(['left', 'right']).isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Arrow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nconst Card = ({ cards, unit, startIndex, endIndex, handleClick, selectDate }) => {\r\n    const unitPostFix = unit.charAt(0);\r\n\r\n    return (\r\n        <div className=\"card-deck col-12\">\r\n            {cards.map((card, index) => {\r\n                const cardClasses = classNames('card col-4', {\r\n                    'border-primary': selectDate === card.d,\r\n                    'border-dark': selectDate !== card.d,\r\n                });\r\n\r\n                if (index >= startIndex && index <= endIndex) {\r\n                    return (\r\n                        <div className={cardClasses} key={card.d} onClick={() => handleClick(card.d)}>\r\n                            <div className=\"card-body\">\r\n                                <p>\r\n                                    <strong>Temp:</strong> {card[`Avg${unit}`].toFixed(2)}\r\n                                    {unitPostFix}\r\n                                </p>\r\n                                <p>\r\n                                    <strong>Date:</strong> {card.d}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nCard.propTypes = {\r\n    cards: PropTypes.arrayOf(\r\n        PropTypes.exact({\r\n            d: PropTypes.string,\r\n            AvgCelcius: PropTypes.number,\r\n            AvgFarenhite: PropTypes.number,\r\n        })\r\n    ).isRequired,\r\n    endIndex: PropTypes.number.isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n    selectDate: PropTypes.string.isRequired,\r\n    startIndex: PropTypes.number.isRequired,\r\n    unit: PropTypes.oneOf(['Celcius', 'Farenhite']).isRequired,\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Chart from 'react-google-charts';\r\n\r\nconst ColumnChart = ({ unit, weatherData, dates }) => {\r\n    let data = [['Date', `Temperature (in ${unit})`]];\r\n\r\n    dates.forEach((d) => {\r\n        const values = weatherData[d].map((weather) => {\r\n            return [`${d} ${weather.time}`, weather[unit]];\r\n        });\r\n\r\n        data.push(...values);\r\n    });\r\n    return <Chart chartType=\"ColumnChart\" width=\"100%\" data={data} />;\r\n};\r\n\r\nColumnChart.propTypes = {\r\n    dates: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    unit: PropTypes.oneOf(['Celcius', 'Farenhite']).isRequired,\r\n    weatherData: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ColumnChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nconst ErrorPage = ({ classes }) => (\r\n    <div\r\n        className={classNames('error-container ', {\r\n            classes,\r\n        })}\r\n    >\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <div className=\"error-template\">\r\n                    <h1>Oops!</h1>\r\n                    <h2>Something Went Wrong!</h2>\r\n                    <div className=\"error-details\">\r\n                        Sorry, an error has occured, Requested page cannot be loaded! Please try again after some time\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nErrorPage.propTypes = {\r\n    classes: PropTypes.string,\r\n};\r\n\r\nErrorPage.defaultProps = {\r\n    classes: '',\r\n};\r\n\r\nexport default ErrorPage;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Loader } from '../../component/Loader';\r\nimport { Radio } from '../../component/Radio';\r\nimport { Arrow } from '../../component/Arrow';\r\nimport { Card } from '../../component/Card';\r\nimport { Chart } from '../../component/Chart';\r\nimport { ErrorPage } from '../../component/Error';\r\n\r\nimport { reset, getWeatherRequest, selectWeatherData, selectCardsData, selectError, selectLoading } from './ducks';\r\n\r\nexport class WeatherContainer extends Component {\r\n    state = {\r\n        unit: 'Celcius',\r\n        startIndex: 0,\r\n        endIndex: 2,\r\n        selectDate: '',\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { getWeatherRequest } = this.props;\r\n\r\n        getWeatherRequest();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const { reset } = this.props;\r\n\r\n        reset();\r\n    }\r\n\r\n    onArrowClick = (direction) => {\r\n        let { startIndex, endIndex } = this.state;\r\n\r\n        startIndex = direction === 'left' ? startIndex - 1 : startIndex + 1;\r\n        endIndex = direction === 'left' ? endIndex - 1 : endIndex + 1;\r\n\r\n        this.setState({ startIndex, endIndex });\r\n    };\r\n\r\n    onTemperatureChange = (evt) => {\r\n        this.setState({\r\n            unit: evt.target.value,\r\n        });\r\n    };\r\n\r\n    onCardClick = (d) => {\r\n        const { selectDate } = this.state;\r\n        let dateToBeSet = '';\r\n\r\n        if (selectDate !== d) {\r\n            dateToBeSet = d;\r\n        }\r\n\r\n        this.setState({ selectDate: dateToBeSet });\r\n    };\r\n\r\n    render() {\r\n        const { loading, cards, weatherData, error } = this.props;\r\n        const { unit, startIndex, endIndex, selectDate } = this.state;\r\n\r\n        if (loading) {\r\n            return <Loader classes=\"mt-5\" />;\r\n        }\r\n\r\n        if (error) {\r\n            return <ErrorPage classes=\"mt-5\" />;\r\n        }\r\n\r\n        const dates =\r\n            selectDate !== ''\r\n                ? [selectDate]\r\n                : cards\r\n                      .filter((card, index) => {\r\n                          return index >= startIndex && index <= endIndex;\r\n                      })\r\n                      .map((data) => {\r\n                          return data.d;\r\n                      });\r\n\r\n        return (\r\n            <div className=\"m-1 p-1 weather-container\">\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-2\">\r\n                        <Radio unit={unit} value=\"Celcius\" handleChange={this.onTemperatureChange} />\r\n                    </div>\r\n                    <div className=\"col-2 offset-8\">\r\n                        <Radio unit={unit} value=\"Farenhite\" handleChange={this.onTemperatureChange} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row mt-2\">\r\n                    <div className=\"col-2\">\r\n                        {startIndex > 0 && (\r\n                            <Arrow direction=\"left\" handleClick={this.onArrowClick}>\r\n                                &#8592;\r\n                            </Arrow>\r\n                        )}\r\n                    </div>\r\n                    <div className=\" col-2 offset-8\">\r\n                        {endIndex < cards.length && (\r\n                            <Arrow direction=\"right\" handleClick={this.onArrowClick}>\r\n                                &#8594;\r\n                            </Arrow>\r\n                        )}\r\n                    </div>\r\n                    <Card\r\n                        unit={unit}\r\n                        cards={cards}\r\n                        startIndex={startIndex}\r\n                        endIndex={endIndex}\r\n                        handleClick={this.onCardClick}\r\n                        selectDate={selectDate}\r\n                    />\r\n                </div>\r\n                <div className=\"row mt-5\">\r\n                    <Chart unit={unit} weatherData={weatherData} dates={dates} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nWeatherContainer.propTypes = {\r\n    cards: PropTypes.arrayOf(\r\n        PropTypes.exact({\r\n            d: PropTypes.string,\r\n            AvgCelcius: PropTypes.number,\r\n            AvgFarenhite: PropTypes.number,\r\n        })\r\n    ).isRequired,\r\n    error: PropTypes.bool.isRequired,\r\n    getWeatherRequest: PropTypes.func.isRequired,\r\n    loading: PropTypes.bool.isRequired,\r\n    reset: PropTypes.func.isRequired,\r\n    weatherData: PropTypes.object.isRequired,\r\n};\r\n\r\nexport const mapStateToProps = (state) => ({\r\n    cards: selectCardsData(state),\r\n    weatherData: selectWeatherData(state),\r\n    error: selectError(state),\r\n    loading: selectLoading(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, { reset, getWeatherRequest })(WeatherContainer);\r\n","import React from 'react';\r\n\r\nimport { WeatherContainer } from './container/Weather';\r\n\r\nconst App = () => (\r\n    <div className=\"container\">\r\n        <WeatherContainer />\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { store } from './store';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}